behaviors {
    #define TYPING_STREAK_TERM 160
    #define KEY_REPEATING_TERM 300
    #define HOMEY_TAPPING_TERM 280
    #define INDEX_TAPPING_TERM 180
    #define LEFT_HAND_KEYS      \
          0  1  2  3  4         \
         10 11 12 13 14 15      \
         22 23 24 25 26 27      \
         34 35 36 37 38 39      \
         46 47 48 49 50 51      \
         64 65 66 67 68
    #define RIGHT_HAND_KEYS     \
                                           5  6  7  8  9 \
                                       16 17 18 19 20 21 \
                                       28 29 30 31 32 33 \
                                       40 41 42 43 44 45 \
                                       58 59 60 61 62 63 \
                                          75 76 77 78 79
    #define THUMB_KEYS          \
                        69 52       57 74                \
                         70 53     56 73                 \
                          71 54   55 72
    homey_left: miryoku_home_row_mods_left_hand {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_LEFT_HAND";
        flavor = "balanced";
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <HOMEY_TAPPING_TERM>;
        quick-tap-ms = <TYPING_STREAK_TERM>;
        global-quick-tap; // with typing streak
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    homey_right: miryoku_home_row_mods_right_hand {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_RIGHT_HAND";
        flavor = "balanced";
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <HOMEY_TAPPING_TERM>;
        quick-tap-ms = <TYPING_STREAK_TERM>;
        global-quick-tap; // with typing streak
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    index_left: miryoku_home_row_mods_left_index_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_LEFT_INDEX_SHIFT";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        //hold-trigger-on-release; // don't wait for other mods
        tapping-term-ms = <INDEX_TAPPING_TERM>;
        quick-tap-ms = <KEY_REPEATING_TERM>; // enable repeat
        //global-quick-tap; // no typing streak
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    index_right: miryoku_home_row_mods_right_index_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_RIGHT_INDEX_SHIFT";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        //hold-trigger-on-release; // don't wait for other mods
        tapping-term-ms = <INDEX_TAPPING_TERM>;
        quick-tap-ms = <KEY_REPEATING_TERM>; // enable repeat
        //global-quick-tap; // no typing streak
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    behavior_caps_word {
        continue-list = <UNDERSCORE MINUS BACKSPACE DELETE N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
    };
};

macros {
    /**
     * Temporarily switches to a layer (`&mo`) while a modifier is held.
     * Analogous to QMK's `LM()`, using a parameterized macro.
     *
     * Params:
     *  1. Layer to switch to
     *  2. Modifier to press while layer is active
     *
     * Example:
     *  `&lm NUM_LAYER LSHIFT`
     */
    lm: lm {
        label = "LAYER_MOD";
        compatible = "zmk,behavior-macro-two-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <2>;
        bindings
            = <&macro_param_1to1>
            , <&macro_press &mo MACRO_PLACEHOLDER>
            , <&macro_param_2to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            , <&macro_pause_for_release>
            , <&macro_param_2to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            , <&macro_param_1to1>
            , <&macro_release &mo MACRO_PLACEHOLDER>
            ;
    };
};
